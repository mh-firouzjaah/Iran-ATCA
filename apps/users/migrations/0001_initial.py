# Generated by Django 3.1.4 on 2020-12-23 11:01

import ckeditor.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('company', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('first_name_fa', models.CharField(blank=True, max_length=150, null=True, verbose_name='first name')),
                ('first_name_en', models.CharField(blank=True, max_length=150, null=True, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('last_name_fa', models.CharField(blank=True, max_length=150, null=True, verbose_name='last name')),
                ('last_name_en', models.CharField(blank=True, max_length=150, null=True, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('description', ckeditor.fields.RichTextField(blank=True, help_text='This text should be provided for `Author` users.', max_length=254, null=True, verbose_name='Description')),
                ('description_fa', ckeditor.fields.RichTextField(blank=True, help_text='This text should be provided for `Author` users.', max_length=254, null=True, verbose_name='Description')),
                ('description_en', ckeditor.fields.RichTextField(blank=True, help_text='This text should be provided for `Author` users.', max_length=254, null=True, verbose_name='Description')),
                ('story', ckeditor.fields.RichTextField(blank=True, max_length=254, null=True, verbose_name='Story')),
                ('story_fa', ckeditor.fields.RichTextField(blank=True, max_length=254, null=True, verbose_name='Story')),
                ('story_en', ckeditor.fields.RichTextField(blank=True, max_length=254, null=True, verbose_name='Story')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.group')),
            ],
            options={
                'verbose_name': 'Group',
                'verbose_name_plural': 'Groups',
            },
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='SocialMedia',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'SocialMedia',
                'verbose_name_plural': 'SocialMedias',
            },
        ),
        migrations.CreateModel(
            name='AirTrafficController',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mobile', models.CharField(blank=True, max_length=15, null=True, verbose_name='Mobile')),
                ('phone', models.CharField(blank=True, max_length=15, null=True, verbose_name='Phone')),
                ('work_city', models.CharField(blank=True, max_length=250, null=True, verbose_name='Work City')),
                ('father', models.CharField(blank=True, max_length=250, null=True, verbose_name='Father')),
                ('birth', models.DateField(blank=True, null=True, verbose_name='Birth')),
                ('birth_place', models.CharField(blank=True, max_length=250, null=True, verbose_name='Birth Place')),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=6, verbose_name='Gender')),
                ('maried', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=True, verbose_name='Maried')),
                ('nationality_code', models.CharField(blank=True, max_length=11, null=True, verbose_name='Nationality Code')),
                ('member_of_iranatca', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=True, verbose_name='Member Of Iran-ATCA')),
                ('iranatca_code', models.CharField(blank=True, max_length=11, null=True, verbose_name='Iran-ATCA code')),
                ('member_of_ifatca', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=False, verbose_name='Member of IFATCA')),
                ('ifatca_code', models.CharField(blank=True, max_length=11, null=True, verbose_name='IFATCA code')),
                ('joined', models.DateField(blank=True, null=True, verbose_name='Joined')),
                ('passedaway', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=False, verbose_name='Passed-away')),
                ('paid_years', models.TextField(help_text='Provide a comma separated list', verbose_name='Paid membership years')),
                ('address', models.TextField(blank=True, null=True, verbose_name='Address')),
                ('academic_licenses', models.TextField(blank=True, help_text='Provide a comma separated list', null=True, verbose_name='Academic Licenses')),
                ('social_links', models.ManyToManyField(blank=True, null=True, to='company.CompanySocialLink', verbose_name='Social links')),
                ('user', models.OneToOneField(help_text='Choose the who has not been selected yet', on_delete=django.db.models.deletion.CASCADE, related_name='atc_info', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Air Traffic Controller',
                'verbose_name_plural': 'Air Traffic Controllers',
                'ordering': ('joined',),
            },
        ),
    ]
